# Type of clustering
distance.function = function(x) as.dist(1 - cor(t(x)))
cluster.function = function(x) hclust( x, method="ward" )
################################################################################
#                                Figure 4A                                     #
################################################################################
############## Pre-treatment, PD versus SD/PR ####################
# Variables needed for the analysis
classes = comp[[5]]$classes
lmr.values = comp[[5]]$lmr.values
ave.dlmrs = comp[[5]]$ave.dlmrs
# unpaired t-test
foo = function(x) ttest(x,classes,c("sd","pr"),"pd")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.05 & abs(ave.dlmrs)>0.5 #cutoffs
# This script saves the data for each comparison in the 'comp' variable
source("./setComparisons.R")
# Type of clustering
distance.function = function(x) as.dist(1 - cor(t(x)))
cluster.function = function(x) hclust( x, method="ward" )
################################################################################
#                                Figure 4A                                     #
################################################################################
############## Pre-treatment, PD versus SD/PR ####################
# Variables needed for the analysis
classes = comp[[2]]$classes
lmr.values = comp[[2]]$lmr.values
ave.dlmrs = comp[[2]]$ave.dlmrs
# unpaired t-test
foo = function(x) ttest(x,classes,c("sd","pr"),"pd")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.05 & abs(ave.dlmrs)>0.5 #cutoffs
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T,density.info="none")
classes = comp[[7]]$classes
lmr.values = comp[[7]]$lmr.values
ave.dlmrs = comp[[7]]$ave.dlmrs
lmr.values
classes = comp[[9]]$classes
lmr.values = comp[[9]]$lmr.values
classes
lmr.values
comp[[9]]$effect.size
classes = comp[[9]]$classes
lmr.values = comp[[9]]$lmr.values
ave.dlmrs = comp[[9]]$effect.size
# unpaired t-test
foo = function(x) ttest(x,classes,c("sd","pr"),"pd")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.05 & abs(ave.dlmrs)>0.5 #cutoffs
topmiRNAs
sum(topmiRNAs)
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T,density.info="none")
############## Pre-treatment, PD versus SD/PR ####################
# Variables needed for the analysis
classes = comp[[2]]$classes
lmr.values = comp[[2]]$lmr.values
ave.dlmrs = comp[[2]]$effect.size
# unpaired t-test
foo = function(x) ttest(x,classes,c("sd","pr"),"pd")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.05 & abs(ave.dlmrs)>0.5 #cutoffs
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T,density.info="none")
classes = comp[[9]]$classes
lmr.values = comp[[9]]$lmr.values
ave.dlmrs = comp[[9]]$effect.size
# unpaired t-test
foo = function(x) ttest(x,classes,c("sd","pr"),"pd")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.01 & abs(ave.dlmrs)>0.5 #cutoffs
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T,density.info="none")
dlmr.values = comp[[7]]$dlmr.values
classes = comp[[7]]$paired.classes
comp[[7]]$effect.size
# Variables needed for the analysis
dlmr.values = comp[[7]]$dlmr.values
classes = comp[[7]]$paired.classes
ddLMR = comp[[7]]$effect.size # effect size
# unpaired t-test on dLMR values
foo = function(x) ttest(x,classes,"sd","pd")
pvals = apply(dlmr.values,1,foo)
topmiRNAs = pvals<0.04 & abs(ddLMR)>0.5
# clustering analysis
dlmr.values.clus = dlmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( dlmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
dlmr.values = comp[[7]]$dlmr.values
classes = comp[[7]]$paired.classes
ddLMR = comp[[7]]$effect.size # effect size
classes
dlmr.values = comp[[7]]$dlmr.values
classes = comp[[7]]$classes
ddLMR = comp[[7]]$effect.size # effect siz
classes
foo = function(x) ttest(x,classes,"sd","pd")
pvals = apply(dlmr.values,1,foo)
topmiRNAs = pvals<0.04 & abs(ddLMR)>0.5
# clustering analysis
dlmr.values.clus = dlmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( dlmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
# This script saves the data for each comparison in the 'comp' variable
source("./setComparisons.R")
# Type of clustering
distance.function = function(x) as.dist(1 - cor(t(x)))
cluster.function = function(x) hclust( x, method="ward" )
# Variables needed for the analysis
dlmr.values = comp[[7]]$dlmr.values
classes = comp[[7]]$classes
ddLMR = comp[[7]]$effect.size # effect size
# unpaired t-test on dLMR values
foo = function(x) ttest(x,classes,"sd","pd")
pvals = apply(dlmr.values,1,foo)
topmiRNAs = pvals<0.04 & abs(ddLMR)>0.5
# clustering analysis
dlmr.values.clus = dlmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( dlmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
# Variables needed for the analysis
classes = comp[[14]]$classes
lmr.values = comp[[14]]$lmr.values
ave.dlmrs = comp[[14]]$ave.dlmrs
# unpaired t-test
foo = function(x) ttest(x,classes,"wt","m")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.02 & abs(ave.dlmrs)>0.5
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("m","wt") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
classes
head(lmr.values)
ave.dlmrs = comp[[14]]$effect.size
# Variables needed for the analysis
classes = comp[[14]]$classes
lmr.values = comp[[14]]$lmr.values
ave.dlmrs = comp[[14]]$effect.size
# unpaired t-test
foo = function(x) ttest(x,classes,"wt","m")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.02 & abs(ave.dlmrs)>0.5
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("m","wt") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
# This script saves the data for each comparison in the 'comp' variable
source("./setComparisons.R")
library(RSvgDevice)
################################################################################
#                  Figure 2B and Table 1                                      #
################################################################################
# Pretreatment LMR values versus Post-combination treatment LMR values
# Variables needed for the analysis
time = comp$s1$unpaired.time
patient = comp$s1$unpaired.patient
lmr.values = comp$s1$lmr.values
ave.dlmrs = comp$s1$ave.dlmrs
# paired t-test
foo = function(x) ttest.paired(x,time,patient)
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
volcanoPlot(pvals,ave.dlmrs,topmiRNAs,
xlim=c(-1.4,1.4),ylim=c(0,4.2))
time = comp$s3$unpaired.time
patient = comp$s3$unpaired.patient
lmr.values = comp$s3$lmr.values
ave.dlmrs = comp$s3$ave.dlmrs
# paired t-test
foo = function(x) ttest.paired(x,time,patient)
pvals = apply(lmr.values,1,foo)
# miRNAs with p<0.01
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
# miRNAs with effect size > 0.5
topmiRNAs = pvals < 2 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
#miRNAs with p<0.01 and effect size>0.5
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
#miRNAs with p<0.01 and effect size>0.5
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
volcanoPlot(pvals,ave.dlmrs,topmiRNAs,
xlim=c(-1.4,1.4),ylim=c(0,4.2))
opendots = c("hsa-miR-10b","hsa-miR-140-3p","hsa-miR-4328")
points(ave.dlmrs[opendots], -log10(pvals[opendots]), col="blue" )
# Variables needed for the analysis
time = comp$s1$unpaired.time
patient = comp$s1$unpaired.patient
lmr.values = comp$s1$lmr.values
ave.dlmrs = comp$s1$ave.dlmrs
# paired t-test
foo = function(x) ttest.paired(x,time,patient)
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
volcanoPlot(pvals,ave.dlmrs,topmiRNAs,
xlim=c(-1.4,1.4),ylim=c(0,4.2))
opendots = c("hsa-miR-10b","hsa-miR-140-3p","hsa-miR-4328")
points(ave.dlmrs[opendots], -log10(pvals[opendots]), col="blue" )
# Variables needed for the analysis
time = comp$s3$unpaired.time
patient = comp$s3$unpaired.patient
lmr.values = comp$s3$lmr.values
ave.dlmrs = comp$s3$ave.dlmrs
# paired t-test
foo = function(x) ttest.paired(x,time,patient)
pvals = apply(lmr.values,1,foo)
# miRNAs with p<0.01
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
# miRNAs with effect size > 0.5
topmiRNAs = pvals < 2 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
#miRNAs with p<0.01 and effect size>0.5
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
volcanoPlot(pvals,ave.dlmrs,topmiRNAs,
xlim=c(-1.4,1.4),ylim=c(0,4.2))
remove(list=ls())
# This script saves the data for each comparison in the 'comp' variable
source("./setComparisons.R")
library(RSvgDevice)
################################################################################
#                  Figure 2B and Table 1                                      #
################################################################################
# Pretreatment LMR values versus Post-combination treatment LMR values
# Variables needed for the analysis
time = comp$s1$unpaired.time
patient = comp$s1$unpaired.patient
lmr.values = comp$s1$lmr.values
ave.dlmrs = comp$s1$ave.dlmrs
# paired t-test
foo = function(x) ttest.paired(x,time,patient)
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
volcanoPlot(pvals,ave.dlmrs,topmiRNAs,
xlim=c(-1.4,1.4),ylim=c(0,4.2))
opendots = c("hsa-miR-10b","hsa-miR-140-3p","hsa-miR-4328")
points(ave.dlmrs[opendots], -log10(pvals[opendots]), col="blue" )
time = comp$s3$unpaired.time
patient = comp$s3$unpaired.patient
lmr.values = comp$s3$lmr.values
ave.dlmrs = comp$s3$ave.dlmrs
# paired t-test
foo = function(x) ttest.paired(x,time,patient)
pvals = apply(lmr.values,1,foo)
# miRNAs with p<0.01
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
# miRNAs with effect size > 0.5
topmiRNAs = pvals < 2 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
#miRNAs with p<0.01 and effect size>0.5
topmiRNAs = pvals < 0.01 & abs(ave.dlmrs) > 0.5 # cutoffs
topTable(pvals,ave.dlmrs,topmiRNAs)
volcanoPlot(pvals,ave.dlmrs,topmiRNAs,
xlim=c(-1.4,1.4),ylim=c(0,4.2))
# This script saves the data for each comparison in the 'comp' variable
source("./setComparisons.R")
# Type of clustering
distance.function = function(x) as.dist(1 - cor(t(x)))
cluster.function = function(x) hclust( x, method="ward" )
################################################################################
#                                Figure 4A                                     #
################################################################################
############## Pre-treatment, PD versus SD/PR ####################
# Variables needed for the analysis
classes = comp[[9]]$classes
lmr.values = comp[[9]]$lmr.values
ave.dlmrs = comp[[9]]$effect.size
# unpaired t-test
foo = function(x) ttest(x,classes,c("sd","pr"),"pd")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.01 & abs(ave.dlmrs)>0.5 #cutoffs
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T,density.info="none")
dlmr.values = comp[[7]]$dlmr.values
classes = comp[[7]]$classes
ddLMR = comp[[7]]$effect.size # effect size
# unpaired t-test on dLMR values
foo = function(x) ttest(x,classes,"sd","pd")
pvals = apply(dlmr.values,1,foo)
topmiRNAs = pvals<0.04 & abs(ddLMR)>0.5
# clustering analysis
dlmr.values.clus = dlmr.values[,classes %in% c("pd","sd","pr") ]
heatmap.2( dlmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
classes = comp[[14]]$classes
lmr.values = comp[[14]]$lmr.values
ave.dlmrs = comp[[14]]$effect.size
# unpaired t-test
foo = function(x) ttest(x,classes,"wt","m")
pvals = apply(lmr.values,1,foo)
topmiRNAs = pvals<0.02 & abs(ave.dlmrs)>0.5
# clustering analysis
lmr.values.clus = lmr.values[,classes %in% c("m","wt") ]
heatmap.2( lmr.values.clus[topmiRNAs,], col=bluered,trace="none",
distfun=distance.function,hclustfun=cluster.function,
mar=c(5,15), breaks=100, symbreaks=T, density.info="none")
# Parse and format the "full" miniML file from NCBI GEO
source("./helperFunctions.R")
source("./loadData.R")
eset = loadData(miniML.file="./GSE37131.xml")
################################################################################
#                                Figure 1                                      #
################################################################################
# Automatically download the miRNA annotations for this platform from NCBI
id.to.miRNA = getGEO.ids("GPL11434")
id.to.miRNA = id.to.miRNA[ featureNames(eset) ]
# remove any row with a missing value
lmr.values = exprs(eset)[ apply(!is.na(exprs(eset)),1,all), ]
# select the 50 most variable miRNAs
top50 = names( sort( apply(lmr.values,1,sd), decreasing=TRUE ) )[1:50]
lmr.values = lmr.values[top50,]
colnames(lmr.values) = 1:ncol(lmr.values) # must be done for set.dend.order function
# A cluster analysis
distance.function = function(x) as.dist(1 - cor(t(x)))
cluster.function = function(x) hclust( x, method="ward" )
dend = as.dendrogram( cluster.function( distance.function(t(lmr.values)) ) )
# choose a color to display for each patient
pat = as.numeric(pData(eset)$patient)
names(pat) = colnames(lmr.values)
cc = timPalette(n=length(unique(pat)))
# Reorder the columns and draw the final heatmap
final.order = c(10,33,11,12,24,25,26,36,27,28,7,8,9,14,13,34,15,17,35,16,
3,32,4,21,22,1,5,6,20,19,18,29,30,31,2,23)
dend2 = set.dend.order(dend,final.order)
colnames(lmr.values) = paste( pData(eset)$patient, pData(eset)$treatment, sep="." )
rownames(lmr.values) = id.to.miRNA[rownames(lmr.values)]
heatmap.2(lmr.values,Colv=dend2,col=bluered,trace="none",
ColSideColors=cc[pat],mar=c(5,15),breaks=100,symbreaks=T,density.info="none")
# Clustering analyses for the five comparisons in HypthesisTests.SAM.R and
# HypothesisTests.t-tests.R
# Parse and format the "full" miniML file from NCBI GEO
source("./HypothesisTests.R")
# Variables needed for the analysis
dlmr.values = comp$s1$dlmr.values
paired.classes = comp$s1$paired.classes
topmiRNAs = topHits$s1
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( paired.classes )
levels(dlmr.colors.clus) =  c("gray","pink","lightgreen")
# dlmr values, With all miRNAs
heatmap.3(dlmr.values, ColSideColors=dlmr.colors.clus)
# dlmr values, With a subset of miRNAs
heatmap.3(dlmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
# Variables needed for the analysis
lmr.values = comp$s2$lmr.values
unpaired.classes = comp$s2$unpaired.classes
topmiRNAs = topHits$s2
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( unpaired.classes )
levels(dlmr.colors.clus) =  c("gray","pink","lightgreen")
# dlmr values, With all miRNAs
heatmap.3( lmr.values, ColSideColors=dlmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
# Variables needed for the analysis
dlmr.values = comp$s3$dlmr.values
paired.classes = comp$s3$paired.classes
topmiRNAs = topHits$s3
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( paired.classes )
levels(dlmr.colors.clus) =  c("gray","pink","lightgreen","lightgreen")
# dlmr values, With all miRNAs
heatmap.3(dlmr.values, ColSideColors=dlmr.colors.clus)
heatmap.3(dlmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
heatmap.3(dlmr.values, ColSideColors=dlmr.colors.clus)
# Variables needed for the analysis
lmr.values = comp$s4$lmr.values
unpaired.classes = comp$s4$unpaired.classes
topmiRNAs = topHits$s4
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( unpaired.classes )
levels(dlmr.colors.clus) =  c("gray","pink","lightgreen","lightgreen")
# dlmr values, With all miRNAs
heatmap.3( lmr.values, ColSideColors=dlmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
lmr.values = comp$s5$lmr.values
topmiRNAs = topHits$s5
classes = comp$s5$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("pink","lightgreen")
# dlmr values, With all miRNAs
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
lmr.values = comp$s6$lmr.values
topmiRNAs = topHits$s6
classes = comp$s6$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("pink","lightgreen")
# dlmr values, With all miRNAs
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
# dlmr values, With a subset of miRNAs
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
dlmr.values = comp$s7$dlmr.values
topmiRNAs = topHits$s7
classes = comp$s7$classes
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( classes )
levels(dlmr.colors.clus) =  c("pink","lightgreen")
# dlmr values, With all miRNAs.
heatmap.3( dlmr.values, ColSideColors=dlmr.colors.clus)
dlmr.values = comp$s8$dlmr.values
topmiRNAs = topHits$s8
classes = comp$s8$classes
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( classes )
levels(dlmr.colors.clus) =  c("pink","lightgreen","lightgreen")
# dlmr values, With all miRNAs. S2.a
heatmap.3( dlmr.values, ColSideColors=dlmr.colors.clus)
heatmap.3( dlmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
lmr.values = comp$s9$lmr.values
topmiRNAs = topHits$s9
classes = comp$s9$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("pink","lightgreen","lightgreen")
# dlmr values, With all miRNAs. S2.a
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
lmr.values = comp$s9$lmr.values
topmiRNAs = topHits$s9
classes = comp$s9$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("pink","lightgreen","lightgreen")
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
lmr.values = comp$s10$lmr.values
topmiRNAs = topHits$s10
classes = comp$s10$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("pink","lightgreen","lightgreen")
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
lmr.values = comp$s11$lmr.values
topmiRNAs = topHits$s11
classes = comp$s11$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("pink","lightgreen","lightgreen")
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
dlmr.values = comp$s12$dlmr.values
topmiRNAs = topHits$s12
classes = comp$s12$classes
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( classes )
levels(dlmr.colors.clus) =  c("orange","lightblue")
heatmap.3( dlmr.values, ColSideColors=dlmr.colors.clus)
heatmap.3( dlmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
dlmr.values = comp$s13$dlmr.values
topmiRNAs = topHits$s13
classes = comp$s13$classes
# Setup color bars for cluster analysis
dlmr.colors.clus = factor( classes )
levels(dlmr.colors.clus) =  c("orange","lightblue")
heatmap.3( dlmr.values, ColSideColors=dlmr.colors.clus)
heatmap.3( dlmr.values[topmiRNAs,], ColSideColors=dlmr.colors.clus )
lmr.values = comp$s14$lmr.values
topmiRNAs = topHits$s14
classes = comp$s14$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("orange","lightblue")
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
lmr.values = comp$s15$lmr.values
topmiRNAs = topHits$s15
classes = comp$s15$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("orange","lightblue")
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
lmr.values = comp$s16$lmr.values
topmiRNAs = topHits$s16
classes = comp$s16$classes
# Setup color bars for cluster analysis
lmr.colors.clus = factor( classes )
levels(lmr.colors.clus) =  c("orange","lightblue")
heatmap.3( lmr.values, ColSideColors=lmr.colors.clus)
heatmap.3( lmr.values[topmiRNAs,], ColSideColors=lmr.colors.clus )
